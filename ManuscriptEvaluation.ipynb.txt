{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9616ae69",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ecc07816",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('pubmed_validation.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fd521e7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.iloc[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2a740734",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>article</th>\n",
       "      <th>abstract</th>\n",
       "      <th>section_names</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>approximately , one - third of patients with s...</td>\n",
       "      <td>background and aim : there is lack of substan...</td>\n",
       "      <td>Introduction\\nSubjects and Methods\\nResults\\nD...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>there is an epidemic of stroke in low and midd...</td>\n",
       "      <td>backgroundthe questionnaire for verifying str...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n2.1. Study sites\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\n cardiovascular diseases account for the hig...</td>\n",
       "      <td>\\n background : timely access to cardiovascul...</td>\n",
       "      <td>Introduction\\nMethods\\nResults\\nDiscussion\\nCo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>results of a liquid culturing system ( bd bact...</td>\n",
       "      <td>to determine differences in the ability of my...</td>\n",
       "      <td>The Study\\nConclusions\\nSupplementary Material</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>the need for magnetic resonance imaging ( mri ...</td>\n",
       "      <td>aimsour aim was to evaluate the potential for...</td>\n",
       "      <td>Introduction\\nMethods\\nPatient selection\\nMagn...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>treatment with statins is highly effective in ...</td>\n",
       "      <td>backgroundstatin use is frequently associated...</td>\n",
       "      <td>Background\\nMaterial and Methods\\nPatients\\nSt...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>most adults with autoimmune diabetes non - ins...</td>\n",
       "      <td>objectivesthe optimal treatment of latent aut...</td>\n",
       "      <td>Introduction\\nObjective\\nSubjects and methods\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>anemia is a global health problem   and an ind...</td>\n",
       "      <td>epidemiological evidence suggests that circul...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n3. Results\\n4. Di...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>following a clinically predictable progression...</td>\n",
       "      <td>the lack of effective \\n therapies for bone m...</td>\n",
       "      <td>Introduction\\nMaterials\\nand Methods\\nResults\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>organisms often employ more than one mechanism...</td>\n",
       "      <td>to perform tasks , organisms often use multip...</td>\n",
       "      <td>Introduction\\nMaterials and methods\\nResults\\n...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             article  \\\n",
       "0  approximately , one - third of patients with s...   \n",
       "1  there is an epidemic of stroke in low and midd...   \n",
       "2  \\n cardiovascular diseases account for the hig...   \n",
       "3  results of a liquid culturing system ( bd bact...   \n",
       "4  the need for magnetic resonance imaging ( mri ...   \n",
       "5  treatment with statins is highly effective in ...   \n",
       "6  most adults with autoimmune diabetes non - ins...   \n",
       "7  anemia is a global health problem   and an ind...   \n",
       "8  following a clinically predictable progression...   \n",
       "9  organisms often employ more than one mechanism...   \n",
       "\n",
       "                                            abstract  \\\n",
       "0   background and aim : there is lack of substan...   \n",
       "1   backgroundthe questionnaire for verifying str...   \n",
       "2   \\n background : timely access to cardiovascul...   \n",
       "3   to determine differences in the ability of my...   \n",
       "4   aimsour aim was to evaluate the potential for...   \n",
       "5   backgroundstatin use is frequently associated...   \n",
       "6   objectivesthe optimal treatment of latent aut...   \n",
       "7   epidemiological evidence suggests that circul...   \n",
       "8   the lack of effective \\n therapies for bone m...   \n",
       "9   to perform tasks , organisms often use multip...   \n",
       "\n",
       "                                       section_names  \n",
       "0  Introduction\\nSubjects and Methods\\nResults\\nD...  \n",
       "1  1. Introduction\\n2. Methods\\n2.1. Study sites\\...  \n",
       "2  Introduction\\nMethods\\nResults\\nDiscussion\\nCo...  \n",
       "3     The Study\\nConclusions\\nSupplementary Material  \n",
       "4  Introduction\\nMethods\\nPatient selection\\nMagn...  \n",
       "5  Background\\nMaterial and Methods\\nPatients\\nSt...  \n",
       "6  Introduction\\nObjective\\nSubjects and methods\\...  \n",
       "7  1. Introduction\\n2. Methods\\n3. Results\\n4. Di...  \n",
       "8  Introduction\\nMaterials\\nand Methods\\nResults\\...  \n",
       "9  Introduction\\nMaterials and methods\\nResults\\n...  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d5c22976",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "import re\n",
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a5e11849",
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess_text(text: str) -> str:\n",
    "    # remove links\n",
    "    text = re.sub(r\"http\\S+\", \"\", text)\n",
    "    # remove special chars and numbers\n",
    "    text = re.sub(\"[^A-Za-z]+\", \" \", text)\n",
    "    \n",
    "    # remove stopwords\n",
    "    tokens = nltk.word_tokenize(text)\n",
    "    tokens = [w for w in tokens if not w.lower() in stopwords.words(\"english\")]\n",
    "    text = \" \".join(tokens)\n",
    "    text = text.lower().strip()\n",
    "    \n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "92adb233",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>article</th>\n",
       "      <th>abstract</th>\n",
       "      <th>section_names</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>approximately , one - third of patients with s...</td>\n",
       "      <td>background and aim : there is lack of substan...</td>\n",
       "      <td>Introduction\\nSubjects and Methods\\nResults\\nD...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>there is an epidemic of stroke in low and midd...</td>\n",
       "      <td>backgroundthe questionnaire for verifying str...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n2.1. Study sites\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\n cardiovascular diseases account for the hig...</td>\n",
       "      <td>\\n background : timely access to cardiovascul...</td>\n",
       "      <td>Introduction\\nMethods\\nResults\\nDiscussion\\nCo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>results of a liquid culturing system ( bd bact...</td>\n",
       "      <td>to determine differences in the ability of my...</td>\n",
       "      <td>The Study\\nConclusions\\nSupplementary Material</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>the need for magnetic resonance imaging ( mri ...</td>\n",
       "      <td>aimsour aim was to evaluate the potential for...</td>\n",
       "      <td>Introduction\\nMethods\\nPatient selection\\nMagn...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>treatment with statins is highly effective in ...</td>\n",
       "      <td>backgroundstatin use is frequently associated...</td>\n",
       "      <td>Background\\nMaterial and Methods\\nPatients\\nSt...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>most adults with autoimmune diabetes non - ins...</td>\n",
       "      <td>objectivesthe optimal treatment of latent aut...</td>\n",
       "      <td>Introduction\\nObjective\\nSubjects and methods\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>anemia is a global health problem   and an ind...</td>\n",
       "      <td>epidemiological evidence suggests that circul...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n3. Results\\n4. Di...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>following a clinically predictable progression...</td>\n",
       "      <td>the lack of effective \\n therapies for bone m...</td>\n",
       "      <td>Introduction\\nMaterials\\nand Methods\\nResults\\...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>organisms often employ more than one mechanism...</td>\n",
       "      <td>to perform tasks , organisms often use multip...</td>\n",
       "      <td>Introduction\\nMaterials and methods\\nResults\\n...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             article  \\\n",
       "0  approximately , one - third of patients with s...   \n",
       "1  there is an epidemic of stroke in low and midd...   \n",
       "2  \\n cardiovascular diseases account for the hig...   \n",
       "3  results of a liquid culturing system ( bd bact...   \n",
       "4  the need for magnetic resonance imaging ( mri ...   \n",
       "5  treatment with statins is highly effective in ...   \n",
       "6  most adults with autoimmune diabetes non - ins...   \n",
       "7  anemia is a global health problem   and an ind...   \n",
       "8  following a clinically predictable progression...   \n",
       "9  organisms often employ more than one mechanism...   \n",
       "\n",
       "                                            abstract  \\\n",
       "0   background and aim : there is lack of substan...   \n",
       "1   backgroundthe questionnaire for verifying str...   \n",
       "2   \\n background : timely access to cardiovascul...   \n",
       "3   to determine differences in the ability of my...   \n",
       "4   aimsour aim was to evaluate the potential for...   \n",
       "5   backgroundstatin use is frequently associated...   \n",
       "6   objectivesthe optimal treatment of latent aut...   \n",
       "7   epidemiological evidence suggests that circul...   \n",
       "8   the lack of effective \\n therapies for bone m...   \n",
       "9   to perform tasks , organisms often use multip...   \n",
       "\n",
       "                                       section_names  \n",
       "0  Introduction\\nSubjects and Methods\\nResults\\nD...  \n",
       "1  1. Introduction\\n2. Methods\\n2.1. Study sites\\...  \n",
       "2  Introduction\\nMethods\\nResults\\nDiscussion\\nCo...  \n",
       "3     The Study\\nConclusions\\nSupplementary Material  \n",
       "4  Introduction\\nMethods\\nPatient selection\\nMagn...  \n",
       "5  Background\\nMaterial and Methods\\nPatients\\nSt...  \n",
       "6  Introduction\\nObjective\\nSubjects and methods\\...  \n",
       "7  1. Introduction\\n2. Methods\\n3. Results\\n4. Di...  \n",
       "8  Introduction\\nMaterials\\nand Methods\\nResults\\...  \n",
       "9  Introduction\\nMaterials and methods\\nResults\\n...  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "94a1557d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['article_modified'] = df['article'].apply(lambda text: preprocess_text(text))\n",
    "df = df[df['article_modified'] != '']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f0097a88",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['abstract_modified'] = df['abstract'].apply(lambda text: preprocess_text(text))\n",
    "df = df[df['abstract_modified'] != '']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e455aaf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['section_names_modified'] = df['section_names'].apply(lambda text: preprocess_text(text))\n",
    "df = df[df['section_names_modified'] != '']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6deca94d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>article</th>\n",
       "      <th>abstract</th>\n",
       "      <th>section_names</th>\n",
       "      <th>article_modified</th>\n",
       "      <th>abstract_modified</th>\n",
       "      <th>section_names_modified</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>approximately , one - third of patients with s...</td>\n",
       "      <td>background and aim : there is lack of substan...</td>\n",
       "      <td>Introduction\\nSubjects and Methods\\nResults\\nD...</td>\n",
       "      <td>approximately one third patients symptomatic v...</td>\n",
       "      <td>background aim lack substantial indian data ve...</td>\n",
       "      <td>introduction subjects methods results demograp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>there is an epidemic of stroke in low and midd...</td>\n",
       "      <td>backgroundthe questionnaire for verifying str...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n2.1. Study sites\\...</td>\n",
       "      <td>epidemic stroke low middle income countries du...</td>\n",
       "      <td>backgroundthe questionnaire verifying stroke f...</td>\n",
       "      <td>introduction methods study sites translation q...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\n cardiovascular diseases account for the hig...</td>\n",
       "      <td>\\n background : timely access to cardiovascul...</td>\n",
       "      <td>Introduction\\nMethods\\nResults\\nDiscussion\\nCo...</td>\n",
       "      <td>cardiovascular diseases account highest mortal...</td>\n",
       "      <td>background timely access cardiovascular health...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>results of a liquid culturing system ( bd bact...</td>\n",
       "      <td>to determine differences in the ability of my...</td>\n",
       "      <td>The Study\\nConclusions\\nSupplementary Material</td>\n",
       "      <td>results liquid culturing system bd bactec mgit...</td>\n",
       "      <td>determine differences ability mycobacterium tu...</td>\n",
       "      <td>study conclusions supplementary material</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>the need for magnetic resonance imaging ( mri ...</td>\n",
       "      <td>aimsour aim was to evaluate the potential for...</td>\n",
       "      <td>Introduction\\nMethods\\nPatient selection\\nMagn...</td>\n",
       "      <td>need magnetic resonance imaging mri patients i...</td>\n",
       "      <td>aimsour aim evaluate potential safely imaging ...</td>\n",
       "      <td>introduction methods patient selection magneti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>treatment with statins is highly effective in ...</td>\n",
       "      <td>backgroundstatin use is frequently associated...</td>\n",
       "      <td>Background\\nMaterial and Methods\\nPatients\\nSt...</td>\n",
       "      <td>treatment statins highly effective primary sec...</td>\n",
       "      <td>backgroundstatin use frequently associated mus...</td>\n",
       "      <td>background material methods patients study pro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>most adults with autoimmune diabetes non - ins...</td>\n",
       "      <td>objectivesthe optimal treatment of latent aut...</td>\n",
       "      <td>Introduction\\nObjective\\nSubjects and methods\\...</td>\n",
       "      <td>adults autoimmune diabetes non insulin requiri...</td>\n",
       "      <td>objectivesthe optimal treatment latent autoimm...</td>\n",
       "      <td>introduction objective subjects methods statis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>anemia is a global health problem   and an ind...</td>\n",
       "      <td>epidemiological evidence suggests that circul...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n3. Results\\n4. Di...</td>\n",
       "      <td>anemia global health problem independent risk ...</td>\n",
       "      <td>epidemiological evidence suggests circulating ...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>following a clinically predictable progression...</td>\n",
       "      <td>the lack of effective \\n therapies for bone m...</td>\n",
       "      <td>Introduction\\nMaterials\\nand Methods\\nResults\\...</td>\n",
       "      <td>following clinically predictable progression p...</td>\n",
       "      <td>lack effective therapies bone metastatic prost...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>organisms often employ more than one mechanism...</td>\n",
       "      <td>to perform tasks , organisms often use multip...</td>\n",
       "      <td>Introduction\\nMaterials and methods\\nResults\\n...</td>\n",
       "      <td>organisms often employ one mechanism accomplis...</td>\n",
       "      <td>perform tasks organisms often use multiple pro...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             article  \\\n",
       "0  approximately , one - third of patients with s...   \n",
       "1  there is an epidemic of stroke in low and midd...   \n",
       "2  \\n cardiovascular diseases account for the hig...   \n",
       "3  results of a liquid culturing system ( bd bact...   \n",
       "4  the need for magnetic resonance imaging ( mri ...   \n",
       "5  treatment with statins is highly effective in ...   \n",
       "6  most adults with autoimmune diabetes non - ins...   \n",
       "7  anemia is a global health problem   and an ind...   \n",
       "8  following a clinically predictable progression...   \n",
       "9  organisms often employ more than one mechanism...   \n",
       "\n",
       "                                            abstract  \\\n",
       "0   background and aim : there is lack of substan...   \n",
       "1   backgroundthe questionnaire for verifying str...   \n",
       "2   \\n background : timely access to cardiovascul...   \n",
       "3   to determine differences in the ability of my...   \n",
       "4   aimsour aim was to evaluate the potential for...   \n",
       "5   backgroundstatin use is frequently associated...   \n",
       "6   objectivesthe optimal treatment of latent aut...   \n",
       "7   epidemiological evidence suggests that circul...   \n",
       "8   the lack of effective \\n therapies for bone m...   \n",
       "9   to perform tasks , organisms often use multip...   \n",
       "\n",
       "                                       section_names  \\\n",
       "0  Introduction\\nSubjects and Methods\\nResults\\nD...   \n",
       "1  1. Introduction\\n2. Methods\\n2.1. Study sites\\...   \n",
       "2  Introduction\\nMethods\\nResults\\nDiscussion\\nCo...   \n",
       "3     The Study\\nConclusions\\nSupplementary Material   \n",
       "4  Introduction\\nMethods\\nPatient selection\\nMagn...   \n",
       "5  Background\\nMaterial and Methods\\nPatients\\nSt...   \n",
       "6  Introduction\\nObjective\\nSubjects and methods\\...   \n",
       "7  1. Introduction\\n2. Methods\\n3. Results\\n4. Di...   \n",
       "8  Introduction\\nMaterials\\nand Methods\\nResults\\...   \n",
       "9  Introduction\\nMaterials and methods\\nResults\\n...   \n",
       "\n",
       "                                    article_modified  \\\n",
       "0  approximately one third patients symptomatic v...   \n",
       "1  epidemic stroke low middle income countries du...   \n",
       "2  cardiovascular diseases account highest mortal...   \n",
       "3  results liquid culturing system bd bactec mgit...   \n",
       "4  need magnetic resonance imaging mri patients i...   \n",
       "5  treatment statins highly effective primary sec...   \n",
       "6  adults autoimmune diabetes non insulin requiri...   \n",
       "7  anemia global health problem independent risk ...   \n",
       "8  following clinically predictable progression p...   \n",
       "9  organisms often employ one mechanism accomplis...   \n",
       "\n",
       "                                   abstract_modified  \\\n",
       "0  background aim lack substantial indian data ve...   \n",
       "1  backgroundthe questionnaire verifying stroke f...   \n",
       "2  background timely access cardiovascular health...   \n",
       "3  determine differences ability mycobacterium tu...   \n",
       "4  aimsour aim evaluate potential safely imaging ...   \n",
       "5  backgroundstatin use frequently associated mus...   \n",
       "6  objectivesthe optimal treatment latent autoimm...   \n",
       "7  epidemiological evidence suggests circulating ...   \n",
       "8  lack effective therapies bone metastatic prost...   \n",
       "9  perform tasks organisms often use multiple pro...   \n",
       "\n",
       "                              section_names_modified  \n",
       "0  introduction subjects methods results demograp...  \n",
       "1  introduction methods study sites translation q...  \n",
       "2  introduction methods results discussion conclu...  \n",
       "3           study conclusions supplementary material  \n",
       "4  introduction methods patient selection magneti...  \n",
       "5  background material methods patients study pro...  \n",
       "6  introduction objective subjects methods statis...  \n",
       "7  introduction methods results discussion conclu...  \n",
       "8  introduction materials methods results discuss...  \n",
       "9  introduction materials methods results discuss...  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8deaae68",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "vectorizer = TfidfVectorizer(sublinear_tf=True, min_df=1, max_df=0.95)\n",
    "X = vectorizer.fit_transform(df).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2a0d5ac5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 1., 0.],\n",
       "       [0., 0., 0., 1., 0., 0.],\n",
       "       [0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 1.]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9802f5c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import BertTokenizer, BertModel\n",
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "aa1ec682",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████| 231508/231508 [00:00<00:00, 507011.07B/s]\n",
      "100%|█████████████████████████████████████████████████████████████████████████████████████████| 433/433 [00:00<?, ?B/s]\n",
      "100%|████████████████████████████████████████████████████████████████| 440473133/440473133 [01:56<00:00, 3766291.91B/s]\n"
     ]
    }
   ],
   "source": [
    "# Load pre-trained BERT model and tokenizer\n",
    "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
    "model = BertModel.from_pretrained('bert-base-uncased')\n",
    "\n",
    "def get_cls_sentence(sentence):\n",
    "    # Tokenize input sentence and convert to tensor\n",
    "    input_ids = torch.tensor([tokenizer.encode(sentence, add_special_tokens=True, max_length=512)])\n",
    "\n",
    "    # Pass input through BERT model and extract embeddings for [CLS] token\n",
    "    with torch.no_grad():\n",
    "        outputs = model(input_ids)\n",
    "        cls_embedding = outputs[0][:, 0, :]\n",
    "    \n",
    "    return cls_embedding.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "01fab6cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Token indices sequence length is longer than the specified maximum sequence length for this model (2847 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (2268 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (1681 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (876 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (4190 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (2579 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (2563 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (1339 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (4722 > 512). Running this sequence through the model will result in indexing errors\n",
      "Token indices sequence length is longer than the specified maximum sequence length for this model (3891 > 512). Running this sequence through the model will result in indexing errors\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elapsed time: 35.35 seconds\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import numpy as np\n",
    "\n",
    "st = time.time()\n",
    "\n",
    "df['article_bert'] = df['article_modified'].apply(lambda sentence: get_cls_sentence(sentence))\n",
    "\n",
    "et = time.time()\n",
    "\n",
    "print(\"Elapsed time: {:.2f} seconds\".format(et - st))\n",
    "\n",
    "X_cls_bert = np.vstack(df['article_bert'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1680dabe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>article</th>\n",
       "      <th>abstract</th>\n",
       "      <th>section_names</th>\n",
       "      <th>article_modified</th>\n",
       "      <th>abstract_modified</th>\n",
       "      <th>section_names_modified</th>\n",
       "      <th>article_bert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>approximately , one - third of patients with s...</td>\n",
       "      <td>background and aim : there is lack of substan...</td>\n",
       "      <td>Introduction\\nSubjects and Methods\\nResults\\nD...</td>\n",
       "      <td>approximately one third patients symptomatic v...</td>\n",
       "      <td>background aim lack substantial indian data ve...</td>\n",
       "      <td>introduction subjects methods results demograp...</td>\n",
       "      <td>[tensor(-0.3053), tensor(0.3711), tensor(0.126...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>there is an epidemic of stroke in low and midd...</td>\n",
       "      <td>backgroundthe questionnaire for verifying str...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n2.1. Study sites\\...</td>\n",
       "      <td>epidemic stroke low middle income countries du...</td>\n",
       "      <td>backgroundthe questionnaire verifying stroke f...</td>\n",
       "      <td>introduction methods study sites translation q...</td>\n",
       "      <td>[tensor(-0.2177), tensor(0.3327), tensor(-0.14...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\n cardiovascular diseases account for the hig...</td>\n",
       "      <td>\\n background : timely access to cardiovascul...</td>\n",
       "      <td>Introduction\\nMethods\\nResults\\nDiscussion\\nCo...</td>\n",
       "      <td>cardiovascular diseases account highest mortal...</td>\n",
       "      <td>background timely access cardiovascular health...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "      <td>[tensor(-0.1474), tensor(0.0865), tensor(0.499...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>results of a liquid culturing system ( bd bact...</td>\n",
       "      <td>to determine differences in the ability of my...</td>\n",
       "      <td>The Study\\nConclusions\\nSupplementary Material</td>\n",
       "      <td>results liquid culturing system bd bactec mgit...</td>\n",
       "      <td>determine differences ability mycobacterium tu...</td>\n",
       "      <td>study conclusions supplementary material</td>\n",
       "      <td>[tensor(-0.4929), tensor(0.2179), tensor(-0.02...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>the need for magnetic resonance imaging ( mri ...</td>\n",
       "      <td>aimsour aim was to evaluate the potential for...</td>\n",
       "      <td>Introduction\\nMethods\\nPatient selection\\nMagn...</td>\n",
       "      <td>need magnetic resonance imaging mri patients i...</td>\n",
       "      <td>aimsour aim evaluate potential safely imaging ...</td>\n",
       "      <td>introduction methods patient selection magneti...</td>\n",
       "      <td>[tensor(-0.1312), tensor(0.2977), tensor(0.257...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>treatment with statins is highly effective in ...</td>\n",
       "      <td>backgroundstatin use is frequently associated...</td>\n",
       "      <td>Background\\nMaterial and Methods\\nPatients\\nSt...</td>\n",
       "      <td>treatment statins highly effective primary sec...</td>\n",
       "      <td>backgroundstatin use frequently associated mus...</td>\n",
       "      <td>background material methods patients study pro...</td>\n",
       "      <td>[tensor(-0.0969), tensor(0.2407), tensor(0.092...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>most adults with autoimmune diabetes non - ins...</td>\n",
       "      <td>objectivesthe optimal treatment of latent aut...</td>\n",
       "      <td>Introduction\\nObjective\\nSubjects and methods\\...</td>\n",
       "      <td>adults autoimmune diabetes non insulin requiri...</td>\n",
       "      <td>objectivesthe optimal treatment latent autoimm...</td>\n",
       "      <td>introduction objective subjects methods statis...</td>\n",
       "      <td>[tensor(-0.3402), tensor(0.2833), tensor(0.155...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>anemia is a global health problem   and an ind...</td>\n",
       "      <td>epidemiological evidence suggests that circul...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n3. Results\\n4. Di...</td>\n",
       "      <td>anemia global health problem independent risk ...</td>\n",
       "      <td>epidemiological evidence suggests circulating ...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "      <td>[tensor(-0.2863), tensor(0.3981), tensor(0.169...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>following a clinically predictable progression...</td>\n",
       "      <td>the lack of effective \\n therapies for bone m...</td>\n",
       "      <td>Introduction\\nMaterials\\nand Methods\\nResults\\...</td>\n",
       "      <td>following clinically predictable progression p...</td>\n",
       "      <td>lack effective therapies bone metastatic prost...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "      <td>[tensor(-0.4662), tensor(0.5329), tensor(0.102...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>organisms often employ more than one mechanism...</td>\n",
       "      <td>to perform tasks , organisms often use multip...</td>\n",
       "      <td>Introduction\\nMaterials and methods\\nResults\\n...</td>\n",
       "      <td>organisms often employ one mechanism accomplis...</td>\n",
       "      <td>perform tasks organisms often use multiple pro...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "      <td>[tensor(-0.3322), tensor(0.3700), tensor(-0.03...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             article  \\\n",
       "0  approximately , one - third of patients with s...   \n",
       "1  there is an epidemic of stroke in low and midd...   \n",
       "2  \\n cardiovascular diseases account for the hig...   \n",
       "3  results of a liquid culturing system ( bd bact...   \n",
       "4  the need for magnetic resonance imaging ( mri ...   \n",
       "5  treatment with statins is highly effective in ...   \n",
       "6  most adults with autoimmune diabetes non - ins...   \n",
       "7  anemia is a global health problem   and an ind...   \n",
       "8  following a clinically predictable progression...   \n",
       "9  organisms often employ more than one mechanism...   \n",
       "\n",
       "                                            abstract  \\\n",
       "0   background and aim : there is lack of substan...   \n",
       "1   backgroundthe questionnaire for verifying str...   \n",
       "2   \\n background : timely access to cardiovascul...   \n",
       "3   to determine differences in the ability of my...   \n",
       "4   aimsour aim was to evaluate the potential for...   \n",
       "5   backgroundstatin use is frequently associated...   \n",
       "6   objectivesthe optimal treatment of latent aut...   \n",
       "7   epidemiological evidence suggests that circul...   \n",
       "8   the lack of effective \\n therapies for bone m...   \n",
       "9   to perform tasks , organisms often use multip...   \n",
       "\n",
       "                                       section_names  \\\n",
       "0  Introduction\\nSubjects and Methods\\nResults\\nD...   \n",
       "1  1. Introduction\\n2. Methods\\n2.1. Study sites\\...   \n",
       "2  Introduction\\nMethods\\nResults\\nDiscussion\\nCo...   \n",
       "3     The Study\\nConclusions\\nSupplementary Material   \n",
       "4  Introduction\\nMethods\\nPatient selection\\nMagn...   \n",
       "5  Background\\nMaterial and Methods\\nPatients\\nSt...   \n",
       "6  Introduction\\nObjective\\nSubjects and methods\\...   \n",
       "7  1. Introduction\\n2. Methods\\n3. Results\\n4. Di...   \n",
       "8  Introduction\\nMaterials\\nand Methods\\nResults\\...   \n",
       "9  Introduction\\nMaterials and methods\\nResults\\n...   \n",
       "\n",
       "                                    article_modified  \\\n",
       "0  approximately one third patients symptomatic v...   \n",
       "1  epidemic stroke low middle income countries du...   \n",
       "2  cardiovascular diseases account highest mortal...   \n",
       "3  results liquid culturing system bd bactec mgit...   \n",
       "4  need magnetic resonance imaging mri patients i...   \n",
       "5  treatment statins highly effective primary sec...   \n",
       "6  adults autoimmune diabetes non insulin requiri...   \n",
       "7  anemia global health problem independent risk ...   \n",
       "8  following clinically predictable progression p...   \n",
       "9  organisms often employ one mechanism accomplis...   \n",
       "\n",
       "                                   abstract_modified  \\\n",
       "0  background aim lack substantial indian data ve...   \n",
       "1  backgroundthe questionnaire verifying stroke f...   \n",
       "2  background timely access cardiovascular health...   \n",
       "3  determine differences ability mycobacterium tu...   \n",
       "4  aimsour aim evaluate potential safely imaging ...   \n",
       "5  backgroundstatin use frequently associated mus...   \n",
       "6  objectivesthe optimal treatment latent autoimm...   \n",
       "7  epidemiological evidence suggests circulating ...   \n",
       "8  lack effective therapies bone metastatic prost...   \n",
       "9  perform tasks organisms often use multiple pro...   \n",
       "\n",
       "                              section_names_modified  \\\n",
       "0  introduction subjects methods results demograp...   \n",
       "1  introduction methods study sites translation q...   \n",
       "2  introduction methods results discussion conclu...   \n",
       "3           study conclusions supplementary material   \n",
       "4  introduction methods patient selection magneti...   \n",
       "5  background material methods patients study pro...   \n",
       "6  introduction objective subjects methods statis...   \n",
       "7  introduction methods results discussion conclu...   \n",
       "8  introduction materials methods results discuss...   \n",
       "9  introduction materials methods results discuss...   \n",
       "\n",
       "                                        article_bert  \n",
       "0  [tensor(-0.3053), tensor(0.3711), tensor(0.126...  \n",
       "1  [tensor(-0.2177), tensor(0.3327), tensor(-0.14...  \n",
       "2  [tensor(-0.1474), tensor(0.0865), tensor(0.499...  \n",
       "3  [tensor(-0.4929), tensor(0.2179), tensor(-0.02...  \n",
       "4  [tensor(-0.1312), tensor(0.2977), tensor(0.257...  \n",
       "5  [tensor(-0.0969), tensor(0.2407), tensor(0.092...  \n",
       "6  [tensor(-0.3402), tensor(0.2833), tensor(0.155...  \n",
       "7  [tensor(-0.2863), tensor(0.3981), tensor(0.169...  \n",
       "8  [tensor(-0.4662), tensor(0.5329), tensor(0.102...  \n",
       "9  [tensor(-0.3322), tensor(0.3700), tensor(-0.03...  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8d3565c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.3052763 ,  0.37107483,  0.12669395, ..., -0.3758154 ,\n",
       "         0.12199357,  0.19975823],\n",
       "       [-0.21768428,  0.33267903, -0.14676668, ..., -0.5904214 ,\n",
       "         0.1893566 ,  0.04917274],\n",
       "       [-0.14742082,  0.0865052 ,  0.49925593, ..., -0.6187231 ,\n",
       "         0.30320308,  0.0867831 ],\n",
       "       ...,\n",
       "       [-0.28625244,  0.39814147,  0.16896136, ..., -0.7063429 ,\n",
       "         0.21660857,  0.07056018],\n",
       "       [-0.4662257 ,  0.53289765,  0.10262102, ..., -0.5828645 ,\n",
       "         0.0687814 ,  0.1610365 ],\n",
       "       [-0.33224884,  0.37002534, -0.0355911 , ..., -0.4980347 ,\n",
       "         0.2719617 ,  0.25208294]], dtype=float32)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_cls_bert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2905aea1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elapsed time: 9.45 seconds\n"
     ]
    }
   ],
   "source": [
    "st = time.time()\n",
    "\n",
    "df['abstract_bert'] = df['abstract_modified'].apply(lambda sentence: get_cls_sentence(sentence))\n",
    "\n",
    "et = time.time()\n",
    "\n",
    "print(\"Elapsed time: {:.2f} seconds\".format(et - st))\n",
    "\n",
    "X_cls_bert_2 = np.vstack(df['abstract_bert'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e5f97e21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elapsed time: 1.83 seconds\n"
     ]
    }
   ],
   "source": [
    "st = time.time()\n",
    "\n",
    "df['section_names_bert'] = df['section_names_modified'].apply(lambda sentence: get_cls_sentence(sentence))\n",
    "\n",
    "et = time.time()\n",
    "\n",
    "print(\"Elapsed time: {:.2f} seconds\".format(et - st))\n",
    "\n",
    "X_cls_bert_3 = np.vstack(df['section_names_bert'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "81c75a88",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>article</th>\n",
       "      <th>abstract</th>\n",
       "      <th>section_names</th>\n",
       "      <th>article_modified</th>\n",
       "      <th>abstract_modified</th>\n",
       "      <th>section_names_modified</th>\n",
       "      <th>article_bert</th>\n",
       "      <th>abstract_bert</th>\n",
       "      <th>section_names_bert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>approximately , one - third of patients with s...</td>\n",
       "      <td>background and aim : there is lack of substan...</td>\n",
       "      <td>Introduction\\nSubjects and Methods\\nResults\\nD...</td>\n",
       "      <td>approximately one third patients symptomatic v...</td>\n",
       "      <td>background aim lack substantial indian data ve...</td>\n",
       "      <td>introduction subjects methods results demograp...</td>\n",
       "      <td>[tensor(-0.3053), tensor(0.3711), tensor(0.126...</td>\n",
       "      <td>[tensor(-0.4492), tensor(0.2708), tensor(-0.07...</td>\n",
       "      <td>[tensor(-0.4296), tensor(0.0692), tensor(0.093...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>there is an epidemic of stroke in low and midd...</td>\n",
       "      <td>backgroundthe questionnaire for verifying str...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n2.1. Study sites\\...</td>\n",
       "      <td>epidemic stroke low middle income countries du...</td>\n",
       "      <td>backgroundthe questionnaire verifying stroke f...</td>\n",
       "      <td>introduction methods study sites translation q...</td>\n",
       "      <td>[tensor(-0.2177), tensor(0.3327), tensor(-0.14...</td>\n",
       "      <td>[tensor(-0.3860), tensor(0.2677), tensor(-0.11...</td>\n",
       "      <td>[tensor(-0.1844), tensor(0.2640), tensor(-0.13...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>\\n cardiovascular diseases account for the hig...</td>\n",
       "      <td>\\n background : timely access to cardiovascul...</td>\n",
       "      <td>Introduction\\nMethods\\nResults\\nDiscussion\\nCo...</td>\n",
       "      <td>cardiovascular diseases account highest mortal...</td>\n",
       "      <td>background timely access cardiovascular health...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "      <td>[tensor(-0.1474), tensor(0.0865), tensor(0.499...</td>\n",
       "      <td>[tensor(-0.4724), tensor(0.2720), tensor(0.460...</td>\n",
       "      <td>[tensor(-0.4943), tensor(0.1450), tensor(-0.05...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>results of a liquid culturing system ( bd bact...</td>\n",
       "      <td>to determine differences in the ability of my...</td>\n",
       "      <td>The Study\\nConclusions\\nSupplementary Material</td>\n",
       "      <td>results liquid culturing system bd bactec mgit...</td>\n",
       "      <td>determine differences ability mycobacterium tu...</td>\n",
       "      <td>study conclusions supplementary material</td>\n",
       "      <td>[tensor(-0.4929), tensor(0.2179), tensor(-0.02...</td>\n",
       "      <td>[tensor(-0.2147), tensor(0.3097), tensor(-0.28...</td>\n",
       "      <td>[tensor(-0.1529), tensor(0.0116), tensor(-0.20...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>the need for magnetic resonance imaging ( mri ...</td>\n",
       "      <td>aimsour aim was to evaluate the potential for...</td>\n",
       "      <td>Introduction\\nMethods\\nPatient selection\\nMagn...</td>\n",
       "      <td>need magnetic resonance imaging mri patients i...</td>\n",
       "      <td>aimsour aim evaluate potential safely imaging ...</td>\n",
       "      <td>introduction methods patient selection magneti...</td>\n",
       "      <td>[tensor(-0.1312), tensor(0.2977), tensor(0.257...</td>\n",
       "      <td>[tensor(-0.3520), tensor(0.3016), tensor(0.300...</td>\n",
       "      <td>[tensor(-0.3359), tensor(0.0023), tensor(-0.14...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>treatment with statins is highly effective in ...</td>\n",
       "      <td>backgroundstatin use is frequently associated...</td>\n",
       "      <td>Background\\nMaterial and Methods\\nPatients\\nSt...</td>\n",
       "      <td>treatment statins highly effective primary sec...</td>\n",
       "      <td>backgroundstatin use frequently associated mus...</td>\n",
       "      <td>background material methods patients study pro...</td>\n",
       "      <td>[tensor(-0.0969), tensor(0.2407), tensor(0.092...</td>\n",
       "      <td>[tensor(-0.1825), tensor(0.1706), tensor(0.217...</td>\n",
       "      <td>[tensor(-0.2292), tensor(0.3233), tensor(-0.02...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>most adults with autoimmune diabetes non - ins...</td>\n",
       "      <td>objectivesthe optimal treatment of latent aut...</td>\n",
       "      <td>Introduction\\nObjective\\nSubjects and methods\\...</td>\n",
       "      <td>adults autoimmune diabetes non insulin requiri...</td>\n",
       "      <td>objectivesthe optimal treatment latent autoimm...</td>\n",
       "      <td>introduction objective subjects methods statis...</td>\n",
       "      <td>[tensor(-0.3402), tensor(0.2833), tensor(0.155...</td>\n",
       "      <td>[tensor(-0.6914), tensor(0.1016), tensor(-0.02...</td>\n",
       "      <td>[tensor(-0.4756), tensor(-0.0865), tensor(-0.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>anemia is a global health problem   and an ind...</td>\n",
       "      <td>epidemiological evidence suggests that circul...</td>\n",
       "      <td>1. Introduction\\n2. Methods\\n3. Results\\n4. Di...</td>\n",
       "      <td>anemia global health problem independent risk ...</td>\n",
       "      <td>epidemiological evidence suggests circulating ...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "      <td>[tensor(-0.2863), tensor(0.3981), tensor(0.169...</td>\n",
       "      <td>[tensor(-0.5142), tensor(0.1178), tensor(-0.06...</td>\n",
       "      <td>[tensor(-0.3172), tensor(0.2378), tensor(-0.11...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>following a clinically predictable progression...</td>\n",
       "      <td>the lack of effective \\n therapies for bone m...</td>\n",
       "      <td>Introduction\\nMaterials\\nand Methods\\nResults\\...</td>\n",
       "      <td>following clinically predictable progression p...</td>\n",
       "      <td>lack effective therapies bone metastatic prost...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "      <td>[tensor(-0.4662), tensor(0.5329), tensor(0.102...</td>\n",
       "      <td>[tensor(-0.6289), tensor(0.3298), tensor(0.240...</td>\n",
       "      <td>[tensor(-0.3733), tensor(0.3051), tensor(-0.07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>organisms often employ more than one mechanism...</td>\n",
       "      <td>to perform tasks , organisms often use multip...</td>\n",
       "      <td>Introduction\\nMaterials and methods\\nResults\\n...</td>\n",
       "      <td>organisms often employ one mechanism accomplis...</td>\n",
       "      <td>perform tasks organisms often use multiple pro...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "      <td>[tensor(-0.3322), tensor(0.3700), tensor(-0.03...</td>\n",
       "      <td>[tensor(-0.3829), tensor(0.1346), tensor(0.123...</td>\n",
       "      <td>[tensor(-0.5152), tensor(0.0229), tensor(-0.06...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             article  \\\n",
       "0  approximately , one - third of patients with s...   \n",
       "1  there is an epidemic of stroke in low and midd...   \n",
       "2  \\n cardiovascular diseases account for the hig...   \n",
       "3  results of a liquid culturing system ( bd bact...   \n",
       "4  the need for magnetic resonance imaging ( mri ...   \n",
       "5  treatment with statins is highly effective in ...   \n",
       "6  most adults with autoimmune diabetes non - ins...   \n",
       "7  anemia is a global health problem   and an ind...   \n",
       "8  following a clinically predictable progression...   \n",
       "9  organisms often employ more than one mechanism...   \n",
       "\n",
       "                                            abstract  \\\n",
       "0   background and aim : there is lack of substan...   \n",
       "1   backgroundthe questionnaire for verifying str...   \n",
       "2   \\n background : timely access to cardiovascul...   \n",
       "3   to determine differences in the ability of my...   \n",
       "4   aimsour aim was to evaluate the potential for...   \n",
       "5   backgroundstatin use is frequently associated...   \n",
       "6   objectivesthe optimal treatment of latent aut...   \n",
       "7   epidemiological evidence suggests that circul...   \n",
       "8   the lack of effective \\n therapies for bone m...   \n",
       "9   to perform tasks , organisms often use multip...   \n",
       "\n",
       "                                       section_names  \\\n",
       "0  Introduction\\nSubjects and Methods\\nResults\\nD...   \n",
       "1  1. Introduction\\n2. Methods\\n2.1. Study sites\\...   \n",
       "2  Introduction\\nMethods\\nResults\\nDiscussion\\nCo...   \n",
       "3     The Study\\nConclusions\\nSupplementary Material   \n",
       "4  Introduction\\nMethods\\nPatient selection\\nMagn...   \n",
       "5  Background\\nMaterial and Methods\\nPatients\\nSt...   \n",
       "6  Introduction\\nObjective\\nSubjects and methods\\...   \n",
       "7  1. Introduction\\n2. Methods\\n3. Results\\n4. Di...   \n",
       "8  Introduction\\nMaterials\\nand Methods\\nResults\\...   \n",
       "9  Introduction\\nMaterials and methods\\nResults\\n...   \n",
       "\n",
       "                                    article_modified  \\\n",
       "0  approximately one third patients symptomatic v...   \n",
       "1  epidemic stroke low middle income countries du...   \n",
       "2  cardiovascular diseases account highest mortal...   \n",
       "3  results liquid culturing system bd bactec mgit...   \n",
       "4  need magnetic resonance imaging mri patients i...   \n",
       "5  treatment statins highly effective primary sec...   \n",
       "6  adults autoimmune diabetes non insulin requiri...   \n",
       "7  anemia global health problem independent risk ...   \n",
       "8  following clinically predictable progression p...   \n",
       "9  organisms often employ one mechanism accomplis...   \n",
       "\n",
       "                                   abstract_modified  \\\n",
       "0  background aim lack substantial indian data ve...   \n",
       "1  backgroundthe questionnaire verifying stroke f...   \n",
       "2  background timely access cardiovascular health...   \n",
       "3  determine differences ability mycobacterium tu...   \n",
       "4  aimsour aim evaluate potential safely imaging ...   \n",
       "5  backgroundstatin use frequently associated mus...   \n",
       "6  objectivesthe optimal treatment latent autoimm...   \n",
       "7  epidemiological evidence suggests circulating ...   \n",
       "8  lack effective therapies bone metastatic prost...   \n",
       "9  perform tasks organisms often use multiple pro...   \n",
       "\n",
       "                              section_names_modified  \\\n",
       "0  introduction subjects methods results demograp...   \n",
       "1  introduction methods study sites translation q...   \n",
       "2  introduction methods results discussion conclu...   \n",
       "3           study conclusions supplementary material   \n",
       "4  introduction methods patient selection magneti...   \n",
       "5  background material methods patients study pro...   \n",
       "6  introduction objective subjects methods statis...   \n",
       "7  introduction methods results discussion conclu...   \n",
       "8  introduction materials methods results discuss...   \n",
       "9  introduction materials methods results discuss...   \n",
       "\n",
       "                                        article_bert  \\\n",
       "0  [tensor(-0.3053), tensor(0.3711), tensor(0.126...   \n",
       "1  [tensor(-0.2177), tensor(0.3327), tensor(-0.14...   \n",
       "2  [tensor(-0.1474), tensor(0.0865), tensor(0.499...   \n",
       "3  [tensor(-0.4929), tensor(0.2179), tensor(-0.02...   \n",
       "4  [tensor(-0.1312), tensor(0.2977), tensor(0.257...   \n",
       "5  [tensor(-0.0969), tensor(0.2407), tensor(0.092...   \n",
       "6  [tensor(-0.3402), tensor(0.2833), tensor(0.155...   \n",
       "7  [tensor(-0.2863), tensor(0.3981), tensor(0.169...   \n",
       "8  [tensor(-0.4662), tensor(0.5329), tensor(0.102...   \n",
       "9  [tensor(-0.3322), tensor(0.3700), tensor(-0.03...   \n",
       "\n",
       "                                       abstract_bert  \\\n",
       "0  [tensor(-0.4492), tensor(0.2708), tensor(-0.07...   \n",
       "1  [tensor(-0.3860), tensor(0.2677), tensor(-0.11...   \n",
       "2  [tensor(-0.4724), tensor(0.2720), tensor(0.460...   \n",
       "3  [tensor(-0.2147), tensor(0.3097), tensor(-0.28...   \n",
       "4  [tensor(-0.3520), tensor(0.3016), tensor(0.300...   \n",
       "5  [tensor(-0.1825), tensor(0.1706), tensor(0.217...   \n",
       "6  [tensor(-0.6914), tensor(0.1016), tensor(-0.02...   \n",
       "7  [tensor(-0.5142), tensor(0.1178), tensor(-0.06...   \n",
       "8  [tensor(-0.6289), tensor(0.3298), tensor(0.240...   \n",
       "9  [tensor(-0.3829), tensor(0.1346), tensor(0.123...   \n",
       "\n",
       "                                  section_names_bert  \n",
       "0  [tensor(-0.4296), tensor(0.0692), tensor(0.093...  \n",
       "1  [tensor(-0.1844), tensor(0.2640), tensor(-0.13...  \n",
       "2  [tensor(-0.4943), tensor(0.1450), tensor(-0.05...  \n",
       "3  [tensor(-0.1529), tensor(0.0116), tensor(-0.20...  \n",
       "4  [tensor(-0.3359), tensor(0.0023), tensor(-0.14...  \n",
       "5  [tensor(-0.2292), tensor(0.3233), tensor(-0.02...  \n",
       "6  [tensor(-0.4756), tensor(-0.0865), tensor(-0.3...  \n",
       "7  [tensor(-0.3172), tensor(0.2378), tensor(-0.11...  \n",
       "8  [tensor(-0.3733), tensor(0.3051), tensor(-0.07...  \n",
       "9  [tensor(-0.5152), tensor(0.0229), tensor(-0.06...  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "18f8408f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.42964825,  0.06922517,  0.09373495, ..., -0.32485604,\n",
       "         0.13018511,  0.3702349 ],\n",
       "       [-0.18440196,  0.26401296, -0.13155927, ..., -0.43875822,\n",
       "         0.14994913,  0.5642522 ],\n",
       "       [-0.49428263,  0.14499724, -0.05156276, ..., -0.38360238,\n",
       "         0.2976313 ,  0.40048492],\n",
       "       ...,\n",
       "       [-0.31717667,  0.23775563, -0.11363696, ..., -0.46953082,\n",
       "         0.27226686,  0.4207842 ],\n",
       "       [-0.3732781 ,  0.30508742, -0.07868384, ..., -0.51490414,\n",
       "         0.3851877 ,  0.41422474],\n",
       "       [-0.5151791 ,  0.0228916 , -0.06434631, ..., -0.40719962,\n",
       "         0.14548042,  0.3885754 ]], dtype=float32)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_cls_bert_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "813cb839",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 768)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_cls_bert_3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2b676973",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gensim in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (4.3.0)\n",
      "Requirement already satisfied: numpy>=1.18.5 in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from gensim) (1.24.3)\n",
      "Requirement already satisfied: scipy>=1.7.0 in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from gensim) (1.10.1)\n",
      "Requirement already satisfied: smart-open>=1.8.1 in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from gensim) (5.2.1)\n",
      "Collecting FuzzyTM>=0.4.0 (from gensim)\n",
      "  Downloading FuzzyTM-2.0.5-py3-none-any.whl (29 kB)\n",
      "Requirement already satisfied: pandas in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from FuzzyTM>=0.4.0->gensim) (1.5.3)\n",
      "Collecting pyfume (from FuzzyTM>=0.4.0->gensim)\n",
      "  Downloading pyFUME-0.2.25-py3-none-any.whl (67 kB)\n",
      "     ---------------------------------------- 0.0/67.1 kB ? eta -:--:--\n",
      "     ---------------------------------------- 67.1/67.1 kB 1.8 MB/s eta 0:00:00\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from pandas->FuzzyTM>=0.4.0->gensim) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from pandas->FuzzyTM>=0.4.0->gensim) (2022.7)\n",
      "Collecting simpful (from pyfume->FuzzyTM>=0.4.0->gensim)\n",
      "  Obtaining dependency information for simpful from https://files.pythonhosted.org/packages/8d/93/8448d3f1aa9d2911b8cba2602aaa1af85eb31a26d28b7b737f1fa5b40c02/simpful-2.11.1-py3-none-any.whl.metadata\n",
      "  Downloading simpful-2.11.1-py3-none-any.whl.metadata (4.8 kB)\n",
      "Collecting fst-pso (from pyfume->FuzzyTM>=0.4.0->gensim)\n",
      "  Downloading fst-pso-1.8.1.tar.gz (18 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\pvikas\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.1->pandas->FuzzyTM>=0.4.0->gensim) (1.16.0)\n",
      "Collecting miniful (from fst-pso->pyfume->FuzzyTM>=0.4.0->gensim)\n",
      "  Downloading miniful-0.0.6.tar.gz (2.8 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Downloading simpful-2.11.1-py3-none-any.whl (32 kB)\n",
      "Building wheels for collected packages: fst-pso, miniful\n",
      "  Building wheel for fst-pso (setup.py): started\n",
      "  Building wheel for fst-pso (setup.py): finished with status 'done'\n",
      "  Created wheel for fst-pso: filename=fst_pso-1.8.1-py3-none-any.whl size=20448 sha256=62c93ac7bb73e83ccf58b25316500a8921ec9f95a1a7f5f800109996b80f8951\n",
      "  Stored in directory: c:\\users\\pvikas\\appdata\\local\\pip\\cache\\wheels\\69\\f5\\e5\\18ad53fe1ed6b2af9fad05ec052e4acbac8e92441df44bad2e\n",
      "  Building wheel for miniful (setup.py): started\n",
      "  Building wheel for miniful (setup.py): finished with status 'done'\n",
      "  Created wheel for miniful: filename=miniful-0.0.6-py3-none-any.whl size=3522 sha256=6ef87af7ef9c2efa2f0b420ef0544a9aeca8148e47ef8502e4c66cbfe80d989e\n",
      "  Stored in directory: c:\\users\\pvikas\\appdata\\local\\pip\\cache\\wheels\\9d\\ff\\2f\\afe4cd56f47de147407705626517d68bea0f3b74eb1fb168e6\n",
      "Successfully built fst-pso miniful\n",
      "Installing collected packages: simpful, miniful, fst-pso, pyfume, FuzzyTM\n",
      "Successfully installed FuzzyTM-2.0.5 fst-pso-1.8.1 miniful-0.0.6 pyfume-0.2.25 simpful-2.11.1\n"
     ]
    }
   ],
   "source": [
    "!pip install gensim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6ac41c74",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from gensim.models import KeyedVectors\n",
    "\n",
    "# # Path to the downloaded GloVe file\n",
    "# glove_path = 'path_to_glove_file.txt'\n",
    "\n",
    "# # Load GloVe embeddings using Gensim\n",
    "# embeddings = KeyedVectors.load_word2vec_format(glove_path, binary=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "aa2bae72",
   "metadata": {},
   "outputs": [],
   "source": [
    "# embeddings = GloVe(name='6B', dim=100)\n",
    "\n",
    "# # Set the maximum sentence length and embedding dimension\n",
    "# max_length = 100 \n",
    "# embedding_dim = 100\n",
    "\n",
    "# # define a function to convert a sentence to a fixed-size vector using GloVe embeddings\n",
    "# def sentence_embedding(sentence):\n",
    "#     words = sentence.split()\n",
    "#     num_words = min(len(words), max_length)\n",
    "#     embedding_sentence = np.zeros((max_length, embedding_dim))\n",
    "    \n",
    "#     for i in range(num_words):\n",
    "#         word = words[i]\n",
    "#         if word in embeddings.stoi:\n",
    "#             embedding_sentence[i] = embeddings.vectors[embeddings.stoi[word]]\n",
    "            \n",
    "#     return embedding_sentence.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "752ffdb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns=['article', 'abstract', 'section_names'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "5ff5cabd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['article_modified', 'abstract_modified', 'section_names_modified',\n",
       "       'article_bert', 'abstract_bert', 'section_names_bert'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "5fb09e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>article_modified</th>\n",
       "      <th>abstract_modified</th>\n",
       "      <th>section_names_modified</th>\n",
       "      <th>article_bert</th>\n",
       "      <th>abstract_bert</th>\n",
       "      <th>section_names_bert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>approximately one third patients symptomatic v...</td>\n",
       "      <td>background aim lack substantial indian data ve...</td>\n",
       "      <td>introduction subjects methods results demograp...</td>\n",
       "      <td>[tensor(-0.3053), tensor(0.3711), tensor(0.126...</td>\n",
       "      <td>[tensor(-0.4492), tensor(0.2708), tensor(-0.07...</td>\n",
       "      <td>[tensor(-0.4296), tensor(0.0692), tensor(0.093...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>epidemic stroke low middle income countries du...</td>\n",
       "      <td>backgroundthe questionnaire verifying stroke f...</td>\n",
       "      <td>introduction methods study sites translation q...</td>\n",
       "      <td>[tensor(-0.2177), tensor(0.3327), tensor(-0.14...</td>\n",
       "      <td>[tensor(-0.3860), tensor(0.2677), tensor(-0.11...</td>\n",
       "      <td>[tensor(-0.1844), tensor(0.2640), tensor(-0.13...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cardiovascular diseases account highest mortal...</td>\n",
       "      <td>background timely access cardiovascular health...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "      <td>[tensor(-0.1474), tensor(0.0865), tensor(0.499...</td>\n",
       "      <td>[tensor(-0.4724), tensor(0.2720), tensor(0.460...</td>\n",
       "      <td>[tensor(-0.4943), tensor(0.1450), tensor(-0.05...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>results liquid culturing system bd bactec mgit...</td>\n",
       "      <td>determine differences ability mycobacterium tu...</td>\n",
       "      <td>study conclusions supplementary material</td>\n",
       "      <td>[tensor(-0.4929), tensor(0.2179), tensor(-0.02...</td>\n",
       "      <td>[tensor(-0.2147), tensor(0.3097), tensor(-0.28...</td>\n",
       "      <td>[tensor(-0.1529), tensor(0.0116), tensor(-0.20...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>need magnetic resonance imaging mri patients i...</td>\n",
       "      <td>aimsour aim evaluate potential safely imaging ...</td>\n",
       "      <td>introduction methods patient selection magneti...</td>\n",
       "      <td>[tensor(-0.1312), tensor(0.2977), tensor(0.257...</td>\n",
       "      <td>[tensor(-0.3520), tensor(0.3016), tensor(0.300...</td>\n",
       "      <td>[tensor(-0.3359), tensor(0.0023), tensor(-0.14...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>treatment statins highly effective primary sec...</td>\n",
       "      <td>backgroundstatin use frequently associated mus...</td>\n",
       "      <td>background material methods patients study pro...</td>\n",
       "      <td>[tensor(-0.0969), tensor(0.2407), tensor(0.092...</td>\n",
       "      <td>[tensor(-0.1825), tensor(0.1706), tensor(0.217...</td>\n",
       "      <td>[tensor(-0.2292), tensor(0.3233), tensor(-0.02...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>adults autoimmune diabetes non insulin requiri...</td>\n",
       "      <td>objectivesthe optimal treatment latent autoimm...</td>\n",
       "      <td>introduction objective subjects methods statis...</td>\n",
       "      <td>[tensor(-0.3402), tensor(0.2833), tensor(0.155...</td>\n",
       "      <td>[tensor(-0.6914), tensor(0.1016), tensor(-0.02...</td>\n",
       "      <td>[tensor(-0.4756), tensor(-0.0865), tensor(-0.3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>anemia global health problem independent risk ...</td>\n",
       "      <td>epidemiological evidence suggests circulating ...</td>\n",
       "      <td>introduction methods results discussion conclu...</td>\n",
       "      <td>[tensor(-0.2863), tensor(0.3981), tensor(0.169...</td>\n",
       "      <td>[tensor(-0.5142), tensor(0.1178), tensor(-0.06...</td>\n",
       "      <td>[tensor(-0.3172), tensor(0.2378), tensor(-0.11...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>following clinically predictable progression p...</td>\n",
       "      <td>lack effective therapies bone metastatic prost...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "      <td>[tensor(-0.4662), tensor(0.5329), tensor(0.102...</td>\n",
       "      <td>[tensor(-0.6289), tensor(0.3298), tensor(0.240...</td>\n",
       "      <td>[tensor(-0.3733), tensor(0.3051), tensor(-0.07...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>organisms often employ one mechanism accomplis...</td>\n",
       "      <td>perform tasks organisms often use multiple pro...</td>\n",
       "      <td>introduction materials methods results discuss...</td>\n",
       "      <td>[tensor(-0.3322), tensor(0.3700), tensor(-0.03...</td>\n",
       "      <td>[tensor(-0.3829), tensor(0.1346), tensor(0.123...</td>\n",
       "      <td>[tensor(-0.5152), tensor(0.0229), tensor(-0.06...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    article_modified  \\\n",
       "0  approximately one third patients symptomatic v...   \n",
       "1  epidemic stroke low middle income countries du...   \n",
       "2  cardiovascular diseases account highest mortal...   \n",
       "3  results liquid culturing system bd bactec mgit...   \n",
       "4  need magnetic resonance imaging mri patients i...   \n",
       "5  treatment statins highly effective primary sec...   \n",
       "6  adults autoimmune diabetes non insulin requiri...   \n",
       "7  anemia global health problem independent risk ...   \n",
       "8  following clinically predictable progression p...   \n",
       "9  organisms often employ one mechanism accomplis...   \n",
       "\n",
       "                                   abstract_modified  \\\n",
       "0  background aim lack substantial indian data ve...   \n",
       "1  backgroundthe questionnaire verifying stroke f...   \n",
       "2  background timely access cardiovascular health...   \n",
       "3  determine differences ability mycobacterium tu...   \n",
       "4  aimsour aim evaluate potential safely imaging ...   \n",
       "5  backgroundstatin use frequently associated mus...   \n",
       "6  objectivesthe optimal treatment latent autoimm...   \n",
       "7  epidemiological evidence suggests circulating ...   \n",
       "8  lack effective therapies bone metastatic prost...   \n",
       "9  perform tasks organisms often use multiple pro...   \n",
       "\n",
       "                              section_names_modified  \\\n",
       "0  introduction subjects methods results demograp...   \n",
       "1  introduction methods study sites translation q...   \n",
       "2  introduction methods results discussion conclu...   \n",
       "3           study conclusions supplementary material   \n",
       "4  introduction methods patient selection magneti...   \n",
       "5  background material methods patients study pro...   \n",
       "6  introduction objective subjects methods statis...   \n",
       "7  introduction methods results discussion conclu...   \n",
       "8  introduction materials methods results discuss...   \n",
       "9  introduction materials methods results discuss...   \n",
       "\n",
       "                                        article_bert  \\\n",
       "0  [tensor(-0.3053), tensor(0.3711), tensor(0.126...   \n",
       "1  [tensor(-0.2177), tensor(0.3327), tensor(-0.14...   \n",
       "2  [tensor(-0.1474), tensor(0.0865), tensor(0.499...   \n",
       "3  [tensor(-0.4929), tensor(0.2179), tensor(-0.02...   \n",
       "4  [tensor(-0.1312), tensor(0.2977), tensor(0.257...   \n",
       "5  [tensor(-0.0969), tensor(0.2407), tensor(0.092...   \n",
       "6  [tensor(-0.3402), tensor(0.2833), tensor(0.155...   \n",
       "7  [tensor(-0.2863), tensor(0.3981), tensor(0.169...   \n",
       "8  [tensor(-0.4662), tensor(0.5329), tensor(0.102...   \n",
       "9  [tensor(-0.3322), tensor(0.3700), tensor(-0.03...   \n",
       "\n",
       "                                       abstract_bert  \\\n",
       "0  [tensor(-0.4492), tensor(0.2708), tensor(-0.07...   \n",
       "1  [tensor(-0.3860), tensor(0.2677), tensor(-0.11...   \n",
       "2  [tensor(-0.4724), tensor(0.2720), tensor(0.460...   \n",
       "3  [tensor(-0.2147), tensor(0.3097), tensor(-0.28...   \n",
       "4  [tensor(-0.3520), tensor(0.3016), tensor(0.300...   \n",
       "5  [tensor(-0.1825), tensor(0.1706), tensor(0.217...   \n",
       "6  [tensor(-0.6914), tensor(0.1016), tensor(-0.02...   \n",
       "7  [tensor(-0.5142), tensor(0.1178), tensor(-0.06...   \n",
       "8  [tensor(-0.6289), tensor(0.3298), tensor(0.240...   \n",
       "9  [tensor(-0.3829), tensor(0.1346), tensor(0.123...   \n",
       "\n",
       "                                  section_names_bert  \n",
       "0  [tensor(-0.4296), tensor(0.0692), tensor(0.093...  \n",
       "1  [tensor(-0.1844), tensor(0.2640), tensor(-0.13...  \n",
       "2  [tensor(-0.4943), tensor(0.1450), tensor(-0.05...  \n",
       "3  [tensor(-0.1529), tensor(0.0116), tensor(-0.20...  \n",
       "4  [tensor(-0.3359), tensor(0.0023), tensor(-0.14...  \n",
       "5  [tensor(-0.2292), tensor(0.3233), tensor(-0.02...  \n",
       "6  [tensor(-0.4756), tensor(-0.0865), tensor(-0.3...  \n",
       "7  [tensor(-0.3172), tensor(0.2378), tensor(-0.11...  \n",
       "8  [tensor(-0.3733), tensor(0.3051), tensor(-0.07...  \n",
       "9  [tensor(-0.5152), tensor(0.0229), tensor(-0.06...  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "38eed138",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pvikas\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "C:\\Users\\pvikas\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1436: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 0 0 0 0 0 0 0 1 2]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "kmeans = KMeans(n_clusters=3, random_state=42)\n",
    "\n",
    "kmeans.fit(X_cls_bert)\n",
    "\n",
    "cluster_labels = kmeans.labels_\n",
    "\n",
    "print(cluster_labels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "38f4fcd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "pca = PCA(n_components=2, random_state=42)\n",
    "\n",
    "X_pca = pca.fit_transform(X_cls_bert)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(X_pca[:, 0], X_pca[:, 1], c=cluster_labels, cmap='viridis', s=50, alpha=0.5)\n",
    "plt.title('K-Means Clustering (K=3) - PCA Visualization')\n",
    "plt.xlabel('Principal Component 1')\n",
    "plt.ylabel('Principal Component 2')\n",
    "plt.colorbar(label='Cluster')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "d31985b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "pca = PCA(n_components=2, random_state=42)\n",
    "\n",
    "X_pca = pca.fit_transform(X_cls_bert)\n",
    "\n",
    "data = {'PCA1': X_pca[:, 0], 'PCA2': X_pca[:, 1], 'Cluster': cluster_labels}\n",
    "df_vis = pd.DataFrame(data)\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(x='PCA1', y='PCA2', data=df_vis, hue='Cluster', palette='viridis', s=50, alpha=0.5)\n",
    "plt.title('K-Means Clustering (K=3) - PCA Visualization with Seaborn')\n",
    "plt.xlabel('Principal Component 1')\n",
    "plt.ylabel('Principal Component 2')\n",
    "plt.legend(title='Cluster')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8a7f9d5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pvikas\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  super()._check_params_vs_input(X, default_n_init=10)\n",
      "C:\\Users\\pvikas\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1436: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "combined_features = np.concatenate((X_cls_bert, X_cls_bert_2, X_cls_bert_3), axis=1)\n",
    "\n",
    "kmeans = KMeans(n_clusters=3, random_state=42)\n",
    "\n",
    "kmeans.fit(combined_features)\n",
    "\n",
    "cluster_labels = kmeans.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "a6eb2c86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 2, 0, 1, 1, 1, 0, 0, 1])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "09932895",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Assuming you have cluster_labels and combined_features from the KMeans clustering\n",
    "pca = PCA(n_components=2, random_state=42)\n",
    "# Fit PCA and transform your data to 2 dimensions for visualization\n",
    "X_pca = pca.fit_transform(combined_features)\n",
    "\n",
    "# Create a DataFrame for visualization\n",
    "data = {'PCA1': X_pca[:, 0], 'PCA2': X_pca[:, 1], 'Cluster': cluster_labels}\n",
    "df_vis = pd.DataFrame(data)\n",
    "\n",
    "# Plotting the clusters in 2D using Seaborn\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(x='PCA1', y='PCA2', data=df_vis, hue='Cluster', palette='viridis', s=50, alpha=0.5)\n",
    "plt.title('K-Means Clustering Visualization (K=3) with PCA')\n",
    "plt.xlabel('Principal Component 1')\n",
    "plt.ylabel('Principal Component 2')\n",
    "plt.legend(title='Cluster')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24fa8058",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
